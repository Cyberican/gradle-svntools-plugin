import at.bxm.gradleplugins.svntools.tasks.SvnApplyPatch
import at.bxm.gradleplugins.svntools.tasks.SvnCreatePatch
import at.bxm.gradleplugins.svntools.tasks.SvnRevert
import at.bxm.gradleplugins.svntools.tasks.SvnVersion

buildscript {
  apply from: "../buildscript.gradle", to: buildscript
}
apply plugin: "at.bxm.svntools"

task createPatch(type: SvnCreatePatch, description: "Make some modification to a workspace, and then create a patch file") {
  source "$project.projectDir/../workspace"
  patchFile = "$project.buildDir/sample.patch"
  doFirst {
    // perform some modifications
    def readmeFile = file("$project.projectDir/../workspace/README.md")
    def readme = readmeFile.text
    readmeFile.text = readme.replace("SVN", "Subversion")
  }
}

task applyPatch(type: SvnApplyPatch, description: "Checking out a project and applying a patch file") {
  patchFile = "$project.projectDir/sample.patch"
  dir = "$project.projectDir/../workspace"
}

// a helper task to clean up after 'createPatch'
task revertAfterCreatePatch(type: SvnRevert) {
  revert "$project.projectDir/../workspace"
  recursive = true
}
createPatch.finalizedBy revertAfterCreatePatch

// a demo task that tells us at the end of the build if the workspace is clean or dirty
task printStatus(type: SvnVersion) {
  sourcePath = "$project.projectDir/../workspace"
  doLast {
    println "svnversion: $svnVersion - working copy is " + (svnVersion.modified ? "dirty" : "clean")
  }
}
[createPatch, applyPatch, revertAfterCreatePatch]*.finalizedBy printStatus

